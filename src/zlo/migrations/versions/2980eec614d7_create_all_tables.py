"""Create all tables

Revision ID: 2980eec614d7
Revises: 
Create Date: 2020-12-04 01:02:05.530459

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '2980eec614d7'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    connection = op.get_bind()
    connection.execute('CREATE EXTENSION IF NOT EXISTS "uuid-ossp";')
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('players',
                    sa.Column('player_id', postgresql.UUID(as_uuid=True), server_default=sa.text('uuid_generate_v4()'),
                              nullable=False),
                    sa.Column('nickname', sa.String(length=40), nullable=False),
                    sa.Column('name', sa.String(length=40), nullable=True),
                    sa.Column('club', sa.String(length=40), nullable=True),
                    sa.PrimaryKeyConstraint('player_id'),
                    sa.UniqueConstraint('nickname')
                    )
    op.create_table('games',
                    sa.Column('game_id', postgresql.UUID(as_uuid=True), server_default=sa.text('uuid_generate_v4()'),
                              nullable=False),
                    sa.Column('date', sa.DateTime(), nullable=True),
                    sa.Column('result', sa.Integer(), nullable=True),
                    sa.Column('advance_result', sa.Integer(), nullable=True),
                    sa.Column('club', sa.String(length=40), nullable=True),
                    sa.Column('table', sa.Integer(), nullable=True),
                    sa.Column('heading', postgresql.UUID(as_uuid=True), nullable=True),
                    sa.Column('tournament', sa.String(length=40), nullable=True),
                    sa.ForeignKeyConstraint(['heading'], ['players.player_id'], ),
                    sa.PrimaryKeyConstraint('game_id')
                    )
    op.create_table('houses',
                    sa.Column('house_id', postgresql.UUID(as_uuid=True), server_default=sa.text('uuid_generate_v4()'),
                              nullable=False),
                    sa.Column('player_id', postgresql.UUID(as_uuid=True), nullable=True),
                    sa.Column('game_id', postgresql.UUID(as_uuid=True), nullable=True),
                    sa.Column('slot', sa.Integer(), nullable=True),
                    sa.Column('role', sa.Integer(), nullable=True),
                    sa.Column('bonus_mark', sa.Float(), nullable=True),
                    sa.Column('fouls', sa.Integer(), nullable=True),
                    sa.ForeignKeyConstraint(['game_id'], ['games.game_id'], ),
                    sa.ForeignKeyConstraint(['player_id'], ['players.player_id'], ),
                    sa.PrimaryKeyConstraint('house_id')
                    )
    op.create_table('best_moves',
                    sa.Column('best_move_id', postgresql.UUID(as_uuid=True),
                              server_default=sa.text('uuid_generate_v4()'), nullable=False),
                    sa.Column('game_id', postgresql.UUID(as_uuid=True), nullable=True),
                    sa.Column('killed_house', postgresql.UUID(as_uuid=True), nullable=True),
                    sa.Column('best_1', postgresql.UUID(as_uuid=True), nullable=True),
                    sa.Column('best_2', postgresql.UUID(as_uuid=True), nullable=True),
                    sa.Column('best_3', postgresql.UUID(as_uuid=True), nullable=True),
                    sa.ForeignKeyConstraint(['best_1'], ['houses.house_id'], ),
                    sa.ForeignKeyConstraint(['best_2'], ['houses.house_id'], ),
                    sa.ForeignKeyConstraint(['best_3'], ['houses.house_id'], ),
                    sa.ForeignKeyConstraint(['game_id'], ['games.game_id'], ),
                    sa.ForeignKeyConstraint(['killed_house'], ['houses.house_id'], ),
                    sa.PrimaryKeyConstraint('best_move_id'),
                    sa.UniqueConstraint('game_id')
                    )
    op.create_table('bonuses_from_players',
                    sa.Column('bonus_id', postgresql.UUID(as_uuid=True), server_default=sa.text('uuid_generate_v4()'),
                              nullable=False),
                    sa.Column('game_id', postgresql.UUID(as_uuid=True), nullable=True),
                    sa.Column('bonus_from', postgresql.UUID(as_uuid=True), nullable=True),
                    sa.Column('bonus_to', postgresql.UUID(as_uuid=True), nullable=True),
                    sa.ForeignKeyConstraint(['bonus_from'], ['houses.house_id'], ),
                    sa.ForeignKeyConstraint(['bonus_to'], ['houses.house_id'], ),
                    sa.ForeignKeyConstraint(['game_id'], ['games.game_id'], ),
                    sa.PrimaryKeyConstraint('bonus_id')
                    )
    op.create_table('bonuses_tolerant',
                    sa.Column('bonus_id', postgresql.UUID(as_uuid=True), server_default=sa.text('uuid_generate_v4()'),
                              nullable=False),
                    sa.Column('game_id', postgresql.UUID(as_uuid=True), nullable=True),
                    sa.Column('house_from_id', postgresql.UUID(as_uuid=True), nullable=True),
                    sa.Column('house_to_id', postgresql.UUID(as_uuid=True), nullable=True),
                    sa.ForeignKeyConstraint(['game_id'], ['games.game_id'], ),
                    sa.ForeignKeyConstraint(['house_from_id'], ['houses.house_id'], ),
                    sa.ForeignKeyConstraint(['house_to_id'], ['houses.house_id'], ),
                    sa.PrimaryKeyConstraint('bonus_id')
                    )
    op.create_table('disqualifieds',
                    sa.Column('disqualified_id', postgresql.UUID(as_uuid=True),
                              server_default=sa.text('uuid_generate_v4()'), nullable=False),
                    sa.Column('game_id', postgresql.UUID(as_uuid=True), nullable=True),
                    sa.Column('house', postgresql.UUID(as_uuid=True), nullable=True),
                    sa.ForeignKeyConstraint(['game_id'], ['games.game_id'], ),
                    sa.ForeignKeyConstraint(['house'], ['houses.house_id'], ),
                    sa.PrimaryKeyConstraint('disqualified_id')
                    )
    op.create_table('don_checks',
                    sa.Column('don_check_id', postgresql.UUID(as_uuid=True),
                              server_default=sa.text('uuid_generate_v4()'), nullable=False),
                    sa.Column('game_id', postgresql.UUID(as_uuid=True), nullable=True),
                    sa.Column('checked_house_id', postgresql.UUID(as_uuid=True), nullable=True),
                    sa.Column('circle_number', sa.Integer(), nullable=True),
                    sa.ForeignKeyConstraint(['checked_house_id'], ['houses.house_id'], ),
                    sa.ForeignKeyConstraint(['game_id'], ['games.game_id'], ),
                    sa.PrimaryKeyConstraint('don_check_id')
                    )
    op.create_table('hand_of_mafia',
                    sa.Column('hand_of_mafia_id', postgresql.UUID(as_uuid=True),
                              server_default=sa.text('uuid_generate_v4()'), nullable=False),
                    sa.Column('game_id', postgresql.UUID(as_uuid=True), nullable=True),
                    sa.Column('house_hand_id', postgresql.UUID(as_uuid=True), nullable=True),
                    sa.Column('victim_id', postgresql.UUID(as_uuid=True), nullable=True),
                    sa.ForeignKeyConstraint(['game_id'], ['games.game_id'], ),
                    sa.ForeignKeyConstraint(['house_hand_id'], ['houses.house_id'], ),
                    sa.ForeignKeyConstraint(['victim_id'], ['houses.house_id'], ),
                    sa.PrimaryKeyConstraint('hand_of_mafia_id')
                    )
    op.create_table('kills',
                    sa.Column('kill_id', postgresql.UUID(as_uuid=True), server_default=sa.text('uuid_generate_v4()'),
                              nullable=False),
                    sa.Column('game_id', postgresql.UUID(as_uuid=True), nullable=True),
                    sa.Column('killed_house_id', postgresql.UUID(as_uuid=True), nullable=True),
                    sa.Column('circle_number', sa.Integer(), nullable=True),
                    sa.ForeignKeyConstraint(['game_id'], ['games.game_id'], ),
                    sa.ForeignKeyConstraint(['killed_house_id'], ['houses.house_id'], ),
                    sa.PrimaryKeyConstraint('kill_id')
                    )
    op.create_table('misses',
                    sa.Column('miss_id', postgresql.UUID(as_uuid=True), server_default=sa.text('uuid_generate_v4()'),
                              nullable=False),
                    sa.Column('game_id', postgresql.UUID(as_uuid=True), nullable=True),
                    sa.Column('house_id', postgresql.UUID(as_uuid=True), nullable=True),
                    sa.Column('circle_number', sa.Integer(), nullable=True),
                    sa.ForeignKeyConstraint(['game_id'], ['games.game_id'], ),
                    sa.ForeignKeyConstraint(['house_id'], ['houses.house_id'], ),
                    sa.PrimaryKeyConstraint('miss_id')
                    )
    op.create_table('nominated_for_best',
                    sa.Column('nominated_for_best_id', postgresql.UUID(as_uuid=True),
                              server_default=sa.text('uuid_generate_v4()'), nullable=False),
                    sa.Column('game_id', postgresql.UUID(as_uuid=True), nullable=True),
                    sa.Column('house', postgresql.UUID(as_uuid=True), nullable=True),
                    sa.ForeignKeyConstraint(['game_id'], ['games.game_id'], ),
                    sa.ForeignKeyConstraint(['house'], ['houses.house_id'], ),
                    sa.PrimaryKeyConstraint('nominated_for_best_id')
                    )
    op.create_table('sheriff_checks',
                    sa.Column('sheriff_check_id', postgresql.UUID(as_uuid=True),
                              server_default=sa.text('uuid_generate_v4()'), nullable=False),
                    sa.Column('game_id', postgresql.UUID(as_uuid=True), nullable=True),
                    sa.Column('checked_house_id', postgresql.UUID(as_uuid=True), nullable=True),
                    sa.Column('circle_number', sa.Integer(), nullable=True),
                    sa.ForeignKeyConstraint(['checked_house_id'], ['houses.house_id'], ),
                    sa.ForeignKeyConstraint(['game_id'], ['games.game_id'], ),
                    sa.PrimaryKeyConstraint('sheriff_check_id')
                    )
    op.create_table('sheriff_versions',
                    sa.Column('sheriff_version_id', postgresql.UUID(as_uuid=True),
                              server_default=sa.text('uuid_generate_v4()'), nullable=False),
                    sa.Column('game_id', postgresql.UUID(as_uuid=True), nullable=True),
                    sa.Column('house', postgresql.UUID(as_uuid=True), nullable=True),
                    sa.ForeignKeyConstraint(['game_id'], ['games.game_id'], ),
                    sa.ForeignKeyConstraint(['house'], ['houses.house_id'], ),
                    sa.PrimaryKeyConstraint('sheriff_version_id')
                    )
    op.create_table('voted',
                    sa.Column('voted_id', postgresql.UUID(as_uuid=True), server_default=sa.text('uuid_generate_v4()'),
                              nullable=False),
                    sa.Column('game_id', postgresql.UUID(as_uuid=True), nullable=True),
                    sa.Column('house_id', postgresql.UUID(as_uuid=True), nullable=True),
                    sa.Column('day', sa.Integer(), nullable=True),
                    sa.ForeignKeyConstraint(['game_id'], ['games.game_id'], ),
                    sa.ForeignKeyConstraint(['house_id'], ['houses.house_id'], ),
                    sa.PrimaryKeyConstraint('voted_id')
                    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('voted')
    op.drop_table('sheriff_versions')
    op.drop_table('sheriff_checks')
    op.drop_table('nominated_for_best')
    op.drop_table('misses')
    op.drop_table('kills')
    op.drop_table('hand_of_mafia')
    op.drop_table('don_checks')
    op.drop_table('disqualifieds')
    op.drop_table('bonuses_tolerant')
    op.drop_table('bonuses_from_players')
    op.drop_table('best_moves')
    op.drop_table('houses')
    op.drop_table('games')
    op.drop_table('players')
    # ### end Alembic commands ###
